# Calcular las probabilidades utilizando la función pnorm
probabilidad_dentro_tolerancia_subida <- pnorm(media_subida + tolerancia_subida, mean = media_subida, sd = desviacion_subida) - pnorm(media_subida - tolerancia_subida, mean = media_subida, sd = desviacion_subida)
probabilidad_fuera_tolerancia_subida <- 1 - probabilidad_dentro_tolerancia_subida
probabilidad_dentro_tolerancia_bajada <- pnorm(media_bajada + tolerancia_bajada, mean = media_bajada, sd = desviacion_bajada) - pnorm(media_bajada - tolerancia_bajada, mean = media_bajada, sd = desviacion_bajada)
probabilidad_fuera_tolerancia_bajada <- 1 - probabilidad_dentro_tolerancia_bajada
# Imprimir los resultados
cat("Probabilidad de velocidades de subida dentro de tolerancia P1:", probabilidad_dentro_tolerancia_subida, "\n")
cat("Probabilidad de velocidades de subida fuera de tolerancia Q1:", probabilidad_fuera_tolerancia_subida, "\n")
cat("Probabilidad de velocidades de bajada dentro de tolerancia P2: ", probabilidad_dentro_tolerancia_bajada, "\n")
cat("Probabilidad de velocidades de bajada fuera de tolerancia Q2: ", probabilidad_fuera_tolerancia_bajada, "\n")
# Cargar el paquete necesario para leer archivos CSV
library(readr)
# Leer el archivo CSV
datos <- read_csv("resultados.csv")
# Obtener los vectores de velocidad de subida y bajada
velocidad_subida <- datos$up
velocidad_bajada <- datos$down
# Calcular la media y desviación estándar de las velocidades de subida
media_subida <- mean(velocidad_subida, na.rm = TRUE)
desviacion_subida <- sd(velocidad_subida, na.rm = TRUE)
# Calcular la media y desviación estándar de las velocidades de bajada
media_bajada <- mean(velocidad_bajada, na.rm = TRUE)
desviacion_bajada <- sd(velocidad_bajada, na.rm = TRUE)
cat("Media de velocidades de subida:", media_subida, "\n")
cat("Desviación estándar de velocidades de subida:", desviacion_subida, "\n")
cat("Media de velocidades de bajada:", media_bajada, "\n")
cat("Desviación estándar de velocidades de bajada:", desviacion_bajada, "\n")
# Definir las tolerancias como múltiplos de la desviación estándar
multiplo_tolerancia <- 2
tolerancia_subida <- multiplo_tolerancia * desviacion_subida
tolerancia_bajada <- multiplo_tolerancia * desviacion_bajada
# Calcular las probabilidades utilizando la función pnorm
probabilidad_dentro_tolerancia_subida <- pnorm(media_subida + tolerancia_subida, mean = media_subida, sd = desviacion_subida) - pnorm(media_subida - tolerancia_subida, mean = media_subida, sd = desviacion_subida)
probabilidad_fuera_tolerancia_subida <- 1 - probabilidad_dentro_tolerancia_subida
probabilidad_dentro_tolerancia_bajada <- pnorm(media_bajada + tolerancia_bajada, mean = media_bajada, sd = desviacion_bajada) - pnorm(media_bajada - tolerancia_bajada, mean = media_bajada, sd = desviacion_bajada)
probabilidad_fuera_tolerancia_bajada <- 1 - probabilidad_dentro_tolerancia_bajada
# Imprimir los resultados
cat("Probabilidad de velocidades de subida dentro de tolerancia P1:", probabilidad_dentro_tolerancia_subida, "\n")
cat("Probabilidad de velocidades de subida fuera de tolerancia Q1:", probabilidad_fuera_tolerancia_subida, "\n")
cat("Probabilidad de velocidades de bajada dentro de tolerancia P2: ", probabilidad_dentro_tolerancia_bajada, "\n")
cat("Probabilidad de velocidades de bajada fuera de tolerancia Q2: ", probabilidad_fuera_tolerancia_bajada, "\n")
source("~/.active-rstudio-document", echo=TRUE)
# Cargar el paquete necesario para leer archivos CSV
library(readr)
# Leer el archivo CSV
datos <- read_csv("resultados.csv")
# Obtener los vectores de velocidad de subida y bajada
velocidad_subida <- datos$up
velocidad_bajada <- datos$down
# Calcular la media y desviación estándar de las velocidades de subida
media_subida <- mean(velocidad_subida, na.rm = TRUE)
desviacion_subida <- sd(velocidad_subida, na.rm = TRUE)
# Calcular la media y desviación estándar de las velocidades de bajada
media_bajada <- mean(velocidad_bajada, na.rm = TRUE)
desviacion_bajada <- sd(velocidad_bajada, na.rm = TRUE)
cat("Media de velocidades de subida:", media_subida, "\n")
cat("Desviación estándar de velocidades de subida:", desviacion_subida, "\n")
cat("Media de velocidades de bajada:", media_bajada, "\n")
cat("Desviación estándar de velocidades de bajada:", desviacion_bajada, "\n")
# Definir las tolerancias como múltiplos de la desviación estándar
multiplo_tolerancia <- 1
tolerancia_subida <- multiplo_tolerancia * desviacion_subida
tolerancia_bajada <- multiplo_tolerancia * desviacion_bajada
intentos = 100
queridos = 15
# Calcular la probabilidad de tener 15 mediciones fuera de tolerancia en 100 intentos
probabilidad_medicion_fuera_tolerancia <- dbinom(queridos, size = intentos, prob = probabilidad_fuera_tolerancia_subida)
cat("Probabilidad de tener 15 mediciones fuera de tolerancia en 100 intentos:", probabilidad_medicion_fuera_tolerancia, "\n")
# Cargar el paquete necesario para leer archivos CSV
library(readr)
# Leer el archivo CSV
datos <- read_csv("resultados.csv")
# Obtener los vectores de velocidad de subida y bajada
velocidad_subida <- datos$up
velocidad_bajada <- datos$down
# Calcular la media y desviación estándar de las velocidades de subida
media_subida <- mean(velocidad_subida, na.rm = TRUE)
desviacion_subida <- sd(velocidad_subida, na.rm = TRUE)
# Calcular la media y desviación estándar de las velocidades de bajada
media_bajada <- mean(velocidad_bajada, na.rm = TRUE)
desviacion_bajada <- sd(velocidad_bajada, na.rm = TRUE)
cat("Media de velocidades de subida:", media_subida, "\n")
cat("Desviación estándar de velocidades de subida:", desviacion_subida, "\n")
cat("Media de velocidades de bajada:", media_bajada, "\n")
cat("Desviación estándar de velocidades de bajada:", desviacion_bajada, "\n")
# Definir las tolerancias como múltiplos de la desviación estándar
multiplo_tolerancia <- 1
tolerancia_subida <- multiplo_tolerancia * desviacion_subida
tolerancia_bajada <- multiplo_tolerancia * desviacion_bajada
intentos <- 100
queridos <- 15
# Calcular la probabilidad de tener 15 mediciones fuera de tolerancia en 100 intentos
probabilidad_medicion_fuera_tolerancia_subida <- dbinom(queridos, size = intentos, prob = probabilidad_fuera_tolerancia_subida)
cat("Probabilidad de tener 15 mediciones fuera de tolerancia en 100 intentos (subida):", probabilidad_medicion_fuera_tolerancia_subida, "\n")
probabilidad_medicion_fuera_tolerancia_bajada <- dbinom(queridos, size = intentos, prob = probabilidad_fuera_tolerancia_bajada)
cat("Probabilidad de tener 15 mediciones fuera de tolerancia en 100 intentos (bajada):", probabilidad_medicion_fuera_tolerancia_bajada, "\n")
# Cargar el paquete necesario para leer archivos CSV
library(readr)
# Leer el archivo CSV
datos <- read_csv("resultados.csv")
# Obtener los vectores de velocidad de subida y bajada
velocidad_subida <- datos$up
velocidad_bajada <- datos$down
# Obtener el vector de distancia
distancia <- datos$distancia
# Calcular la media y desviación estándar de las velocidades de subida
media_subida <- mean(velocidad_subida, na.rm = TRUE)
desviacion_subida <- sd(velocidad_subida, na.rm = TRUE)
# Calcular la media y desviación estándar de las velocidades de bajada
media_bajada <- mean(velocidad_bajada, na.rm = TRUE)
desviacion_bajada <- sd(velocidad_bajada, na.rm = TRUE)
# Calcular la media y desviación estándar de la distancia
media_distancia <- mean(distancia, na.rm = TRUE)
desviacion_distancia <- sd(distancia, na.rm = TRUE)
cat("Media de velocidades de subida:", media_subida, "\n")
cat("Desviación estándar de velocidades de subida:", desviacion_subida, "\n")
cat("Media de velocidades de bajada:", media_bajada, "\n")
cat("Desviación estándar de velocidades de bajada:", desviacion_bajada, "\n")
cat("Media de distancia:", media_distancia, "\n")
cat("Desviación estándar de distancia:", desviacion_distancia, "\n")
# Definir las tolerancias como múltiplos de la desviación estándar
multiplo_tolerancia <- 1
tolerancia_subida <- multiplo_tolerancia * desviacion_subida
tolerancia_bajada <- multiplo_tolerancia * desviacion_bajada
tolerancia_distancia <- multiplo_tolerancia * desviacion_distancia
probabilidad_dentro_tolerancia_subida <- pnorm(media_subida + tolerancia_subida, mean = media_subida, sd = desviacion_subida) - pnorm(media_subida - tolerancia_subida, mean = media_subida, sd = desviacion_subida)
probabilidad_fuera_tolerancia_subida <- 1 - probabilidad_dentro_tolerancia_subida
probabilidad_dentro_tolerancia_bajada <- pnorm(media_bajada + tolerancia_bajada, mean = media_bajada, sd = desviacion_bajada) - pnorm(media_bajada - tolerancia_bajada, mean = media_bajada, sd = desviacion_bajada)
probabilidad_fuera_tolerancia_bajada <- 1 - probabilidad_dentro_tolerancia_bajada
probabilidad_dentro_tolerancia_distancia <- pnorm(media_distancia + tolerancia_distancia, mean = media_distancia, sd = desviacion_distancia) - pnorm(media_distancia - tolerancia_distancia, mean = media_distancia, sd = desviacion_distancia)
probabilidad_fuera_tolerancia_distancia <- 1 - probabilidad_dentro_tolerancia_distancia
intentos <- 100
queridos <- 15
# Calcular la probabilidad de tener 15 mediciones fuera de tolerancia en 100 intentos
probabilidad_medicion_fuera_tolerancia_subida <- dbinom(queridos, size = intentos, prob = probabilidad_fuera_tolerancia_subida)
cat("Probabilidad de tener 15 mediciones fuera de tolerancia en 100 intentos (subida):", probabilidad_medicion_fuera_tolerancia_subida, "\n")
probabilidad_medicion_fuera_tolerancia_bajada <- dbinom(queridos, size = intentos, prob = probabilidad_fuera_tolerancia_bajada)
cat("Probabilidad de tener 15 mediciones fuera de tolerancia en 100 intentos (bajada):", probabilidad_medicion_fuera_tolerancia_bajada, "\n")
probabilidad_medicion_fuera_tolerancia_distancia <- dbinom(queridos, size = intentos, prob =probabilidad_fuera_tolerancia_distancia)
cat("Probabilidad de tener 15 mediciones fuera de tolerancia en 100 intentos (distancia):", probabilidad_medicion_fuera_tolerancia_distancia, "\n")
source("C:/Users/eubgo/Desktop/SpeedUP/PBinom.R")
source("C:/Users/eubgo/Desktop/SpeedUP/PGeom.R")
source("~/.active-rstudio-document")
source("C:/Users/eubgo/Desktop/SpeedUP/pBinomNeg.R")
# Imprime el resultado de la prueba
print(resultado)
# Carga los datos
data <- read.csv("resultados.csv")
# Pide al usuario los nombres de los dos salones que quiere comparar
salon1 <- readline(prompt="Introduce el nombre del primer salón: ")
# Filtra los datos para obtener solo las mediciones de la velocidad de subida para los dos salones
data_salon1 <- data[data$salon == salon1, "up"]
data_salon2 <- data[data$salon == salon2, "up"]
# Realiza la prueba t
resultado <- t.test(data_salon1, data_salon2)
# Imprime el resultado de la prueba
print(resultado)
source("~/.active-rstudio-document")
source("C:/Users/eubgo/Desktop/SpeedUP/tSubida.R")
source("~/.active-rstudio-document")
source("C:/Users/eubgo/Desktop/SpeedUP/tSubida.R")
source("~/.active-rstudio-document")
source("C:/Users/eubgo/Desktop/SpeedUP/tSubida.R")
library(ggplot2)
install.packages("ggplot2", dep=T)
library(ggplot2)
library(dplyr)
library(tidyr)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Leer los datos del archivo resultados.csv
data <- read.csv("resultados.csv")
library(ggplot2)
library(dplyr)
library(tidyr)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Leer los datos del archivo resultados.csv
data <- read.csv("results.csv")
velocidad_subida <- data$up
velocidad_bajada <- data$down
# Cálculos estadísticos de subida
media_subida <- mean(velocidad_subida, na.rm = TRUE)
moda_subida <- Mode(velocidad_subida)
desviacion_subida <- sd(velocidad_subida, na.rm = TRUE)
# Rangos de velocidad de subida
rango_min_subida <- floor(min(velocidad_subida) / 10) * 10
library(ggplot2)
library(dplyr)
library(tidyr)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Leer los datos del archivo resultados.csv
data <- read.csv("results.csv")
velocidad_subida <- data$up
velocidad_bajada <- data$down
# Cálculos estadísticos de subida
media_subida <- mean(velocidad_subida, na.rm = TRUE)
moda_subida <- Mode(velocidad_subida)
desviacion_subida <- sd(velocidad_subida, na.rm = TRUE)
# Rangos de velocidad de subida
rango_min_subida <- floor(min(velocidad_subida) / 10) * 10
source("~/Desktop/SpeedUP/barchartDist.R")
library(ggplot2)
library(dplyr)
library(tidyr)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Leer los datos del archivo resultados.csv
data <- read.csv("results.csv")
velocidad_subida <- as.numeric(data$up)
velocidad_bajada <- as.numeric(data$down)
# Cálculos estadísticos de subida
media_subida <- mean(velocidad_subida, na.rm = TRUE)
moda_subida <- Mode(velocidad_subida)
desviacion_subida <- sd(velocidad_subida, na.rm = TRUE)
# Rangos de velocidad de subida
rango_min_subida <- floor(min(velocidad_subida) / 10) * 10
rango_max_subida <- ceiling(max(velocidad_subida) / 10) * 10
rangos_subida <- seq(rango_min_subida, rango_max_subida, by = 10)
source("~/Desktop/SpeedUP/colchart.R")
source("~/Desktop/SpeedUP/freqtab.R")
source("~/Desktop/SpeedUP/barchartDist.R")
unique(data$up)
unique(data$down)
source("~/Desktop/SpeedUP/barchartDist.R")
library(ggplot2)
library(dplyr)
library(tidyr)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Leer los datos del archivo resultados.csv
data <- read.csv("results.csv")
velocidad_subida <- as.numeric(data$up)
velocidad_bajada <- as.numeric(data$down)
# Cálculos estadísticos de subida
media_subida <- mean(velocidad_subida, na.rm = TRUE)
moda_subida <- Mode(velocidad_subida)
desviacion_subida <- sd(velocidad_subida, na.rm = TRUE)
# Rangos de velocidad de subida
rango_min_subida <- floor(min(velocidad_subida) / 10) * 10
rango_max_subida <- ceiling(max(velocidad_subida) / 10) * 10
rangos_subida <- seq(rango_min_subida, rango_max_subida, by = 10)
# Tabla de frecuencia de velocidad de subida
tabla_subida <- data.frame(Rango_de_Velocidad = cut(velocidad_subida, breaks = rangos_subida, include.lowest = TRUE)) %>%
count(Rango_de_Velocidad) %>%
arrange(Rango_de_Velocidad) %>%
rename(Frecuencia = n) %>%
mutate(Frecuencia_Relativa = Frecuencia / sum(Frecuencia),
Frecuencia_Acumulada = cumsum(Frecuencia))
# Convertir los intervalos de subida a formato de cadena
tabla_subida$Rango_de_Velocidad <- as.character(tabla_subida$Rango_de_Velocidad)
# Gráfica de frecuencia de velocidad de subida
plt_subida <- ggplot(tabla_subida, aes(x = Rango_de_Velocidad, y = Frecuencia)) +
geom_bar(stat = "identity", width = 0.8) +
labs(x = "Rango de Velocidad de subida (Mbps)", y = "Frecuencia", title = "Frecuencia de Velocidad de Subida") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
coord_flip()
# Resultados de subida
cat("Estadísticas de Velocidad de Subida:\n")
cat("Media:", media_subida, "\n")
cat("Moda:", moda_subida, "\n")
cat("Desviación estándar:", desviacion_subida, "\n")
# Handle empty download speed data
if (all(is.na(velocidad_bajada))) {
cat("\nNo hay datos de Velocidad de Bajada.")
} else {
# Cálculos estadísticos de bajada
media_bajada <- mean(velocidad_bajada, na.rm = TRUE)
moda_bajada <- Mode(velocidad_bajada)
desviacion_bajada <- sd(velocidad_bajada, na.rm = TRUE)
# Rangos de velocidad de bajada
rango_min_bajada <- floor(min(velocidad_bajada) / 10) * 10
rango_max_bajada <- ceiling(max(velocidad_bajada) / 10) * 10
rangos_bajada <- seq(rango_min_bajada, rango_max_bajada, by = 10)
# Tabla de frecuencia de velocidad de bajada
tabla_bajada <- data.frame(Rango_de_Velocidad = cut(velocidad_bajada, breaks = rangos_bajada, include.lowest = TRUE)) %>%
count(Rango_de_Velocidad) %>%
arrange(Rango_de_Velocidad) %>%
rename(Frecuencia = n) %>%
mutate(Frecuencia_Relativa = Frecuencia / sum(Frecuencia),
Frecuencia_Acumulada = cumsum(Frecuencia))
# Convertir los intervalos de bajada a formato de cadena
tabla_bajada$Rango_de_Velocidad <- as.character(tabla_bajada$Rango_de_Velocidad)
# Gráfica de frecuencia de velocidad de bajada
plt_bajada <- ggplot(tabla_bajada, aes(x = Rango_de_Velocidad, y = Frecuencia)) +
geom_bar(stat = "identity", width = 0.8) +
labs(x = "Rango de Velocidad de bajada (Mbps)", y = "Frecuencia", title = "Frecuencia de Velocidad de Bajada") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
coord_flip()
# Resultados de bajada
cat("\nEstadísticas de Velocidad de Bajada:\n")
cat("Media:", media_bajada, "\n")
cat("Moda:", moda_bajada, "\n")
cat("Desviación estándar:", desviacion_bajada, "\n")
}
plt_subida
plt_bajada
source("~/Desktop/SpeedUP/barchartDist.R")
source("~/Desktop/SpeedUP/colchart.R")
library(ggplot2)
library(dplyr)
library(tidyr)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Leer los datos del archivo resultados.csv
data <- read.csv("results.csv")
velocidad_subida <- data$up
velocidad_bajada <- data$down
# Cálculos estadísticos de subida
media_subida <- mean(velocidad_subida, na.rm = TRUE)
moda_subida <- Mode(velocidad_subida)
desviacion_subida <- sd(velocidad_subida, na.rm = TRUE)
# Rangos de velocidad de subida
rango_min_subida <- floor(min(velocidad_subida) / 10) * 10
rango_max_subida <- ceiling(max(velocidad_subida) / 10) * 10
rangos_subida <- seq(rango_min_subida, rango_max_subida, by = 10)
# Tabla de frecuencia de velocidad de subida
tabla_subida <- data.frame(Rango_de_Velocidad = cut(velocidad_subida, breaks = rangos_subida, include.lowest = TRUE)) %>%
count(Rango_de_Velocidad) %>%
arrange(Rango_de_Velocidad) %>%
rename(Frecuencia = n) %>%
mutate(Frecuencia_Relativa = Frecuencia / sum(Frecuencia),
Frecuencia_Acumulada = cumsum(Frecuencia))
# Convertir los intervalos de subida a formato de cadena
tabla_subida$Rango_de_Velocidad <- as.character(tabla_subida$Rango_de_Velocidad)
# Gráfica de frecuencia de velocidad de subida
plt_subida <- ggplot(tabla_subida, aes(x = Rango_de_Velocidad, y = Frecuencia)) +
geom_bar(stat = "identity", width = 0.8) +
labs(x = "Rango de Velocidad de subida (Mbps)", y = "Frecuencia", title = "Frecuencia de Velocidad de Subida") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Resultados de subida
cat("Estadísticas de Velocidad de Subida:\n")
cat("Media:", media_subida, "\n")
cat("Moda:", moda_subida, "\n")
cat("Desviación estándar:", desviacion_subida, "\n")
# Handle empty download speed data
if (all(is.na(velocidad_bajada))) {
cat("\nNo hay datos de Velocidad de Bajada.")
} else {
# Cálculos estadísticos de bajada
media_bajada <- mean(velocidad_bajada, na.rm = TRUE)
moda_bajada <- Mode(velocidad_bajada)
desviacion_bajada <- sd(velocidad_bajada, na.rm = TRUE)
# Rangos de velocidad de bajada
rango_min_bajada <- floor(min(velocidad_bajada) / 10) * 10
rango_max_bajada <- ceiling(max(velocidad_bajada) / 10) * 10
rangos_bajada <- seq(rango_min_bajada, rango_max_bajada, by = 10)
# Tabla de frecuencia de velocidad de bajada
tabla_bajada <- data.frame(Rango_de_Velocidad = cut(velocidad_bajada, breaks = rangos_bajada, include.lowest = TRUE)) %>%
count(Rango_de_Velocidad) %>%
arrange(Rango_de_Velocidad) %>%
rename(Frecuencia = n) %>%
mutate(Frecuencia_Relativa = Frecuencia / sum(Frecuencia),
Frecuencia_Acumulada = cumsum(Frecuencia))
# Convertir los intervalos de bajada a formato de cadena
tabla_bajada$Rango_de_Velocidad <- as.character(tabla_bajada$Rango_de_Velocidad)
# Gráfica de frecuencia de velocidad de bajada
plt_bajada <- ggplot(tabla_bajada, aes(x = Rango_de_Velocidad, y = Frecuencia)) +
geom_bar(stat = "identity", width = 0.8) +
labs(x = "Rango de Velocidad de bajada (Mbps)", y = "Frecuencia", title = "Frecuencia de Velocidad de Bajada") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Resultados de bajada
cat("\nEstadísticas de Velocidad de Bajada:\n")
cat("Media:", media_bajada, "\n")
cat("Moda:", moda_bajada, "\n")
cat("Desviación estándar:", desviacion_bajada, "\n")
}
plt_subida
plt_bajada
library(dplyr)
library(tidyr)
# Leer los datos del archivo resultados.csv
data <- read.csv("result.csv")
library(dplyr)
library(tidyr)
# Leer los datos del archivo resultados.csv
data <- read.csv("results.csv")
# Definir los intervalos de clase
rango_min <- floor(min(c(data$up, data$down)) / 10) * 10
rango_max <- ceiling(max(c(data$up, data$down)) / 10) * 10
rangos <- seq(rango_min, rango_max, by = 10)
# Tabla de frecuencia de velocidad de subida
tabla_subida <- data %>%
mutate(Rango_de_Velocidad = cut(up, breaks = rangos, include.lowest = TRUE)) %>%
count(Rango_de_Velocidad) %>%
arrange(Rango_de_Velocidad) %>%
rename(Frecuencia = n) %>%
mutate(Frecuencia_Relativa = Frecuencia / sum(Frecuencia),
Frecuencia_Acumulada = cumsum(Frecuencia)) %>%
filter(Frecuencia != 0)
# Convertir los intervalos de subida a formato de cadena
tabla_subida$Rango_de_Velocidad <- as.character(tabla_subida$Rango_de_Velocidad)
# Tabla de frecuencia de velocidad de bajada
tabla_bajada <- data %>%
mutate(Rango_de_Velocidad = cut(down, breaks = rangos, include.lowest = TRUE)) %>%
count(Rango_de_Velocidad) %>%
arrange(Rango_de_Velocidad) %>%
rename(Frecuencia = n) %>%
mutate(Frecuencia_Relativa = Frecuencia / sum(Frecuencia),
Frecuencia_Acumulada = cumsum(Frecuencia)) %>%
filter(Frecuencia != 0)
# Convertir los intervalos de bajada a formato de cadena
tabla_bajada$Rango_de_Velocidad <- as.character(tabla_bajada$Rango_de_Velocidad)
# Imprimir la tabla de frecuencia de velocidad de subida
cat("Tabla de Frecuencia de Velocidad de Subida:\n")
print(tabla_subida)
# Imprimir la tabla de frecuencia de velocidad de bajada
cat("\nTabla de Frecuencia de Velocidad de Bajada:\n")
print(tabla_bajada)
source("~/Desktop/SpeedUP/freqtab.R")
source("~/Desktop/SpeedUP/freqtabDist.R")
source("~/Desktop/SpeedUP/PBinom.R")
source("~/Desktop/SpeedUP/pBinomNeg.R")
source("~/Desktop/SpeedUP/PGeom.R")
source("~/Desktop/SpeedUP/pNormSpeed.R")
source("~/Desktop/SpeedUP/PtolearanciaDistancia.R")
source("~/Desktop/SpeedUP/PtolearanciaVelocidades.R")
source("~/Desktop/SpeedUP/scatter.R")
library(ggplot2)
library(stats)
# Leer los datos del archivo resultados.csv
data <- read.csv("results.csv")
velocidad_subida <- data$up
velocidad_bajada <- data$down
# Cálculos estadísticos de subida
media_subida <- mean(velocidad_subida)
desviacion_subida <- sd(velocidad_subida)
# Cálculos estadísticos de bajada
media_bajada <- mean(velocidad_bajada)
desviacion_bajada <- sd(velocidad_bajada)
# Gráfica de dispersión de velocidad de subida y bajada
ggplot(data, aes(x = up, y = down)) +
geom_point() +
labs(x = "Velocidad de subida (Mbps)", y = "Velocidad de bajada (Mbps)",
title = "Velocidad de Subida vs Velocidad de Bajada")
# Resultados de subida
cat("Estadísticas de Velocidad de Subida:\n")
cat("Media:", media_subida, "\n")
cat("Desviación estándar:", desviacion_subida, "\n")
# Resultados de bajada
cat("\nEstadísticas de Velocidad de Bajada:\n")
cat("Media:", media_bajada, "\n")
cat("Desviación estándar:", desviacion_bajada, "\n")
source("~/Desktop/SpeedUP/scatterDist.R")
library(ggplot2)
library(dplyr)
library(tidyr)
daa <- read.csv("results.csv")
# Scatter plot of distance values
plt_distancia <- ggplot(data, aes(x = salon, y = distancia)) +
geom_point() +
labs(x = "Salón", y = "Distancia", title = "Valores de Distancia")
plt_distancia
source("~/Desktop/SpeedUP/tendency.R")
library(ggplot2)
library(stats)
# Leer los datos del archivo resultados.csv
data <- read.csv("results.csv")
velocidad_subida <- data$up
velocidad_bajada <- data$down
# Cálculos estadísticos de subida
media_subida <- mean(velocidad_subida)
moda_subida <- as.numeric(names(table(velocidad_subida))[table(velocidad_subida) == max(table(velocidad_subida))])
desviacion_subida <- sd(velocidad_subida)
# Cálculos estadísticos de bajada
media_bajada <- mean(velocidad_bajada)
moda_bajada <- as.numeric(names(table(velocidad_bajada))[table(velocidad_bajada) == max(table(velocidad_bajada))])
desviacion_bajada <- sd(velocidad_bajada)
# Gráfica de dispersión de velocidad de subida y bajada
ggplot(data, aes(x = up, y = down)) +
geom_point() +
labs(x = "Velocidad de subida (Mbps)", y = "Velocidad de bajada (Mbps)",
title = "Velocidad de Subida vs Velocidad de Bajada") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_text(x = 40, y = 260, label = paste("y =", round(coef(lm(down ~ up, data))["up"], 2), "x +",
round(coef(lm(down ~ up, data))["(Intercept)"], 2)), size = 4) +
geom_text(x = 40, y = 250, label = paste("r =", round(cor(velocidad_subida, velocidad_bajada), 2)), size = 4)
# Resultados de subida
cat("Estadísticas de Velocidad de Subida:\n")
cat("Media:", media_subida, "\n")
cat("Moda:", moda_subida, "\n")
cat("Desviación estándar:", desviacion_subida, "\n")
# Resultados de bajada
cat("\nEstadísticas de Velocidad de Bajada:\n")
cat("Media:", media_bajada, "\n")
cat("Moda:", moda_bajada, "\n")
cat("Desviación estándar:", desviacion_bajada, "\n")
# Perform linear regression
lm_model <- lm(down ~ up, data)
slope <- coef(lm_model)["up"]
intercept <- coef(lm_model)["(Intercept)"]
r_value <- cor(velocidad_subida, velocidad_bajada)
# Print the trendline equation and r-value
cat("\n")
cat("y =", round(slope, 2), "x +", round(intercept, 2), "\n")
cat("r =", round(r_value, 2), "\n")
source("~/Desktop/SpeedUP/tendency.R")
source("~/Desktop/SpeedUP/WelchTestParam.R")
source("~/Desktop/SpeedUP/WilcoxonTestNoParam.R")
